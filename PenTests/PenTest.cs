using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Task1;

namespace PenTests
{
    [TestClass]
    public class PenTest
    {
        [TestMethod]
        public void Constructor1ParamTest()
        {
            Pen pen = new Pen(10);
            Assert.IsNotNull(pen);
        }

        [TestMethod]
        public void Constructor2ParamsTest()
        {
            Pen pen = new Pen(10, 1.1);
            Assert.IsNotNull(pen);
        }

        [TestMethod]
        public void Constructor3ParamsTest()
        {
            Pen pen = new Pen(10, 1.1, "RED");
            Assert.IsNotNull(pen);
        }

        [TestMethod]
        public void DefautColorTest()
        {
            Pen pen = new Pen(10, 1.1);
            Assert.AreEqual(pen.GetColor(), "BLUE");
        }

        [TestMethod]
        public void ChangeColorTest()
        {
            Pen pen = new Pen(10, 1.1, "RED");
            Assert.AreEqual(pen.GetColor(), "RED");
        }

        [TestMethod]
        public void WritePartialContainer2ParamsTest()
        {
            Pen pen = new Pen(10, 1.1);
            String word = pen.Write("12345");
            Assert.AreEqual(word, "12345");
        }

        [TestMethod]
        public void WriteAllContainer2ParamsTest()
        {
            Pen pen = new Pen(10, 1.1);
            String word = pen.Write("1234567890");
            Assert.AreEqual(word, "123456789");
        }

        [TestMethod]
        public void WriteAllContainer1ParamTest()
        {
            Pen pen = new Pen(6);
            String word = pen.Write("123456");
            Assert.AreEqual(word, "123456");
        }

        [TestMethod]
        public void WritePartialContainer1ParamTest()
        {
            Pen pen = new Pen(6);
            pen.Write("12345");
            Assert.AreEqual(pen.Write("6789"), "6");
        }

        [TestMethod]
        public void IsWorkMethodTest()
        {
            Pen pen = new Pen(5);
            pen.Write("12345");
            Assert.IsFalse(pen.IsWork());
        }

        [TestMethod]
        public void WriteEmptyTest()
        {
            Pen pen = new Pen(5);
            pen.Write("12345");
            Assert.AreEqual(pen.Write("123"), "");
        }

        [TestMethod]
        public void NegativeContainerTest()
        {
            bool wasException = false;
            try
            {
                Pen pen = new Pen(-2);
            }
            catch
            {
                wasException = true;
            }
            Assert.IsTrue(wasException);
        }

        [TestMethod]
        public void NegativeSizeLetterTest()
        {
            bool wasException = false;
            try
            {
                Pen pen = new Pen(5, -1.2);
            }
            catch
            {
                wasException = true;
            }
            Assert.IsTrue(wasException);
        }

        [TestMethod]
        public void DoSomethingElseTest()
        {
            bool wasException = false;
            try
            {
                Pen pen = new Pen(5, -1.2);
            }
            catch
            {
                wasException = true;
            }
            Assert.IsFalse(wasException);
        }
    }
}
